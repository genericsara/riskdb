{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Risk Database","title":"Risk Database"},{"location":"#risk-database","text":"","title":"Risk Database"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/","text":"Log4Shell Summary Log4j is a Java-based logging utility widely used as a dependency in a lot of popular frameworks, including but not limited to Apache Hadoop, Struts2, and others. The Log4Shell RCE vulnerability allows remote attackers to execute remote code on the affected versions of Apache Log4j in order to gain access to systems. All versions from 2.0-alpha7 to 2.17.0, excluding 2.3.2 and 2.12.4 are affected by this vulnerability. Solution Disabling the feature with log4j2.formatMsgNoLooups is not enough! Some older posts on the internet state that it is enough to start the Java VM with a command line that disables the affected feature. This does not protect you against CVE-2021-45046 . Uprade to version 2.16.0 or later. (recommended) Remove the class JndiLookup from the Java Classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class Further Reading https://logging.apache.org/log4j/2.x/security.html https://access.redhat.com/security/vulnerabilities/RHSB-2021-009 https://www.lunasec.io/docs/blog/log4j-zero-day/ https://securitytrails.com/blog/apache-log4j-vulnerability","title":"Log4Shell"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/#log4shell","text":"","title":"Log4Shell"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/#summary","text":"Log4j is a Java-based logging utility widely used as a dependency in a lot of popular frameworks, including but not limited to Apache Hadoop, Struts2, and others. The Log4Shell RCE vulnerability allows remote attackers to execute remote code on the affected versions of Apache Log4j in order to gain access to systems. All versions from 2.0-alpha7 to 2.17.0, excluding 2.3.2 and 2.12.4 are affected by this vulnerability.","title":"Summary"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/#solution","text":"Disabling the feature with log4j2.formatMsgNoLooups is not enough! Some older posts on the internet state that it is enough to start the Java VM with a command line that disables the affected feature. This does not protect you against CVE-2021-45046 . Uprade to version 2.16.0 or later. (recommended) Remove the class JndiLookup from the Java Classpath: zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class","title":"Solution"},{"location":"Components/Log4j%20-%20Log4shell%20vulnerability/#further-reading","text":"https://logging.apache.org/log4j/2.x/security.html https://access.redhat.com/security/vulnerabilities/RHSB-2021-009 https://www.lunasec.io/docs/blog/log4j-zero-day/ https://securitytrails.com/blog/apache-log4j-vulnerability","title":"Further Reading"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/","text":"LFI - Local File Include Summary File inclusions are crucial for any server-side scripting languages and are responsible for content of files to be used as of an app\u2019s code. Local File Inclusion (LFI) occurs when malicious actors trick a web app into either running or exposing files on a web server, potentially causing sensitive information such as passwords or API keys to leak. Without properly implemented filtering, an attacker can request a specific path of a file and get access to sensitive information An attacker can attempt to inject malicious input to server log files and gain remote code execution Exploiting the LFI vulnerability can lead to code execution on the client-side and lead to further attacks, such as cross-site scripting (XSS) Detection Detecting LFI is most easily done with an automated vulnerability scanner as it\u2019s a widespread vulnerability Code scans can be performed in order to detect LFI weaknesses before hitting production servers Solution Implement proper filtering making sure no other than the intended files can be accessed. Further Reading https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21804 https://www.acunetix.com/blog/articles/local-file-inclusion-lfi/ https://owasp.org/www-project-web-security-testing-guide/v41/4Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion","title":"LFI - Local File Include"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#lfi-local-file-include","text":"","title":"LFI - Local File Include"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#summary","text":"File inclusions are crucial for any server-side scripting languages and are responsible for content of files to be used as of an app\u2019s code. Local File Inclusion (LFI) occurs when malicious actors trick a web app into either running or exposing files on a web server, potentially causing sensitive information such as passwords or API keys to leak. Without properly implemented filtering, an attacker can request a specific path of a file and get access to sensitive information An attacker can attempt to inject malicious input to server log files and gain remote code execution Exploiting the LFI vulnerability can lead to code execution on the client-side and lead to further attacks, such as cross-site scripting (XSS)","title":"Summary"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#detection","text":"Detecting LFI is most easily done with an automated vulnerability scanner as it\u2019s a widespread vulnerability Code scans can be performed in order to detect LFI weaknesses before hitting production servers","title":"Detection"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#solution","text":"Implement proper filtering making sure no other than the intended files can be accessed.","title":"Solution"},{"location":"WebApp/LFI%20-%20Local%20File%20Include/#further-reading","text":"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21804 https://www.acunetix.com/blog/articles/local-file-inclusion-lfi/ https://owasp.org/www-project-web-security-testing-guide/v41/4Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion","title":"Further Reading"},{"location":"WebApp/Open%20URL%20Redirect/","text":"Open URL Redirect Summary When a web application accepts untrusted input, it can cause the app to redirect the user to a specific URL contained in that input that is not within the application. Attackers can leverage this to modify the input and redirect users to a malicious site. If a user lands on a suspicious website, they will be exposed to the risk of malware conducting keylogging, a phishing scam or other attacks that could steal their credentials and personally identifiable information (PII). Solution Avoid using redirects and forwards, or if necessary, don\u2019t allow user input for the destination If user input needs to be used, the supplied value needs to be validated before redirecting the user Parameters that are used for redirecting should be restricted only to paths within the application Further Reading https://cwe.mitre.org/data/definitions/601.html https://portswigger.net/kb/issues/00500100_open-redirection-reflected https://blog.intigriti.com/hackademy/open-redirect/","title":"Open URL Redirect"},{"location":"WebApp/Open%20URL%20Redirect/#open-url-redirect","text":"","title":"Open URL Redirect"},{"location":"WebApp/Open%20URL%20Redirect/#summary","text":"When a web application accepts untrusted input, it can cause the app to redirect the user to a specific URL contained in that input that is not within the application. Attackers can leverage this to modify the input and redirect users to a malicious site. If a user lands on a suspicious website, they will be exposed to the risk of malware conducting keylogging, a phishing scam or other attacks that could steal their credentials and personally identifiable information (PII).","title":"Summary"},{"location":"WebApp/Open%20URL%20Redirect/#solution","text":"Avoid using redirects and forwards, or if necessary, don\u2019t allow user input for the destination If user input needs to be used, the supplied value needs to be validated before redirecting the user Parameters that are used for redirecting should be restricted only to paths within the application","title":"Solution"},{"location":"WebApp/Open%20URL%20Redirect/#further-reading","text":"https://cwe.mitre.org/data/definitions/601.html https://portswigger.net/kb/issues/00500100_open-redirection-reflected https://blog.intigriti.com/hackademy/open-redirect/","title":"Further Reading"},{"location":"WebApp/Server-Side%20Request%20Forgery/","text":"Server-Side Request Forgery Summary Web applications can have a functionality to import data from, publish data or read data from a URL that can be tampered with. An attacker can exploit the calls to this functionality by supplying or modifying a URL. When the modified request goes to a server, the server-side code picks it up and tries to read data to the URL. By carefully selecting target URLs, an attacker can be able to read data such as AWS metadata, database HTTP interfaces and files that are not directly exposed to the internet. Solution Whitelist the hostname or IP that your application needs to access Ensure that the received response from the request sent by the server is as expected Enable authentication for all services, including ones on the local network Further Reading https://www.invicti.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/ https://www.hacksplaining.com/exercises/ssrf# https://cwe.mitre.org/data/definitions/918.html","title":"Server-Side Request Forgery"},{"location":"WebApp/Server-Side%20Request%20Forgery/#server-side-request-forgery","text":"","title":"Server-Side Request Forgery"},{"location":"WebApp/Server-Side%20Request%20Forgery/#summary","text":"Web applications can have a functionality to import data from, publish data or read data from a URL that can be tampered with. An attacker can exploit the calls to this functionality by supplying or modifying a URL. When the modified request goes to a server, the server-side code picks it up and tries to read data to the URL. By carefully selecting target URLs, an attacker can be able to read data such as AWS metadata, database HTTP interfaces and files that are not directly exposed to the internet.","title":"Summary"},{"location":"WebApp/Server-Side%20Request%20Forgery/#solution","text":"Whitelist the hostname or IP that your application needs to access Ensure that the received response from the request sent by the server is as expected Enable authentication for all services, including ones on the local network","title":"Solution"},{"location":"WebApp/Server-Side%20Request%20Forgery/#further-reading","text":"https://www.invicti.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/ https://www.hacksplaining.com/exercises/ssrf# https://cwe.mitre.org/data/definitions/918.html","title":"Further Reading"},{"location":"WebApp/Username%20Enumeration%20-%20Generic/","text":"Username enumeration (generic) Summary Username enumeration is a popular vulnerability that affects all types of applications. It happens when a malicious actor is able to build up a list of valid usernames from the application or system. This practice is pretty common in all kinds of applications, but web apps are especially vulnerable to this type of risk, due to the validation controls that can let the attacker know if some users are invalid or not due to the usage of \u2018Invalid username\u2019 and similar messages. Solution Avoid displaying validation messages like \u201cInvalid username\u201d to the end-users. Rate limit login attempts per IP and username. Further Reading https://www.rapid7.com/blog/post/2017/06/15/about-user-enumeration/ https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account","title":"Username enumeration (generic)"},{"location":"WebApp/Username%20Enumeration%20-%20Generic/#username-enumeration-generic","text":"","title":"Username enumeration (generic)"},{"location":"WebApp/Username%20Enumeration%20-%20Generic/#summary","text":"Username enumeration is a popular vulnerability that affects all types of applications. It happens when a malicious actor is able to build up a list of valid usernames from the application or system. This practice is pretty common in all kinds of applications, but web apps are especially vulnerable to this type of risk, due to the validation controls that can let the attacker know if some users are invalid or not due to the usage of \u2018Invalid username\u2019 and similar messages.","title":"Summary"},{"location":"WebApp/Username%20Enumeration%20-%20Generic/#solution","text":"Avoid displaying validation messages like \u201cInvalid username\u201d to the end-users. Rate limit login attempts per IP and username.","title":"Solution"},{"location":"WebApp/Username%20Enumeration%20-%20Generic/#further-reading","text":"https://www.rapid7.com/blog/post/2017/06/15/about-user-enumeration/ https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account","title":"Further Reading"},{"location":"WebApp/phpinfo-disclosure/","text":"phpinfo disclosure Summary The phpinfo(); function will emit the full php configuration of the server including all version numbers of all installed modules. Some applications include a phpinfo.php by default. The phpinfo(); function leaks the php version and version of all installed modules The phpinfo(); function can leak credentials and other sensitive information, including server environment variables Knowing the file system structure might give an attacker an advantage, especially if your site is vulnerable to directory traversal attacks Solution In most cases, the best solution is to remove the affected file. Further Reading https://www.php.net/manual/en/function.phpinfo.php https://stackoverflow.com/questions/3196011/what-security-problems-could-come-from-exposing-phpinfo-to-end-users","title":"phpinfo disclosure"},{"location":"WebApp/phpinfo-disclosure/#phpinfo-disclosure","text":"","title":"phpinfo disclosure"},{"location":"WebApp/phpinfo-disclosure/#summary","text":"The phpinfo(); function will emit the full php configuration of the server including all version numbers of all installed modules. Some applications include a phpinfo.php by default. The phpinfo(); function leaks the php version and version of all installed modules The phpinfo(); function can leak credentials and other sensitive information, including server environment variables Knowing the file system structure might give an attacker an advantage, especially if your site is vulnerable to directory traversal attacks","title":"Summary"},{"location":"WebApp/phpinfo-disclosure/#solution","text":"In most cases, the best solution is to remove the affected file.","title":"Solution"},{"location":"WebApp/phpinfo-disclosure/#further-reading","text":"https://www.php.net/manual/en/function.phpinfo.php https://stackoverflow.com/questions/3196011/what-security-problems-could-come-from-exposing-phpinfo-to-end-users","title":"Further Reading"},{"location":"WebApp/web%20debug%20enabled/","text":"Web Debug Enabled Summary Enabling a debug feature in both apps and web servers is a common practice when developing applications, as it helps to locate and fix errors quickly. The danger of this practice resides when web debug remains enabled in production servers: this allows remote attackers to identify sensitive information from the app or the system where they are hosted, such as notices, warnings, and critical errors, that can be later used to launch targeted attacks against certain CVEs. Exposing debug messages is considered bad practice, as it discloses a lot of information about the environment that would otherwise not be accessible Worst case, debug information can contain sensitive information such as environment variables containing API keys Solution Disable the debug feature on the application or the web server. Further Reading https://www.php.net/manual/en/function.error-reporting.php https://docs.microsoft.com/en-us/troubleshoot/developer/webapps/aspnet/development/disable-debugging-application https://wordpress.org/support/article/debugging-in-wordpress/","title":"Web Debug Enabled"},{"location":"WebApp/web%20debug%20enabled/#web-debug-enabled","text":"","title":"Web Debug Enabled"},{"location":"WebApp/web%20debug%20enabled/#summary","text":"Enabling a debug feature in both apps and web servers is a common practice when developing applications, as it helps to locate and fix errors quickly. The danger of this practice resides when web debug remains enabled in production servers: this allows remote attackers to identify sensitive information from the app or the system where they are hosted, such as notices, warnings, and critical errors, that can be later used to launch targeted attacks against certain CVEs. Exposing debug messages is considered bad practice, as it discloses a lot of information about the environment that would otherwise not be accessible Worst case, debug information can contain sensitive information such as environment variables containing API keys","title":"Summary"},{"location":"WebApp/web%20debug%20enabled/#solution","text":"Disable the debug feature on the application or the web server.","title":"Solution"},{"location":"WebApp/web%20debug%20enabled/#further-reading","text":"https://www.php.net/manual/en/function.error-reporting.php https://docs.microsoft.com/en-us/troubleshoot/developer/webapps/aspnet/development/disable-debugging-application https://wordpress.org/support/article/debugging-in-wordpress/","title":"Further Reading"}]}